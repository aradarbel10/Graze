use std::str::FromStr;
use crate::raw::*;

grammar;

Comma<T> : Vec<T> = {
  <ts : (CommaOne<T>)?> => match ts {
    None => vec![],
    Some(ts) => ts,
  }
};

CommaOne<T> : Vec<T> = {
  <t : T> <mut ts : ("," <T>)*> => { ts.insert(0, t); ts }
};

CommaTwo<T> : Vec<T> = {
  <t : T> <mut ts : ("," <T>)+> => { ts.insert(0, t); ts }
};


Num : i32 = <s : r"[0-9]+"> => i32::from_str(s).unwrap();
Char : char = <c : r"'.'"> => char::from_str(c).unwrap();
Ident : String = <id : r"[a-zA-Z][a-zA-Z0-9]*"> => id.to_string();

// multiple [P]recedence levels
OpP1 : BinOp = {
  ">"  => BinOp::GT,
  ">=" => BinOp::GTE,
  "<"  => BinOp::LT,
  "<=" => BinOp::LTE,
  "==" => BinOp::Eq,
};
ExprP1 : Box<Expr> = {
  <l : ExprP2> <op : OpP1> <r : ExprP2> => Box::new(Expr::BinOp(op, l, r)),
  <l : ExprP1> "@" <r : ExprP2> => Box::new(Expr::BinOp(BinOp::Index, l, r)),
  ExprP2
};

OpP2 : BinOp = {
  "+"  => BinOp::Add,
  "-"  => BinOp::Sub,
  "||" => BinOp::Or,
  "<<" => BinOp::Shl,
  ">>" => BinOp::Shr,
};
ExprP2 : Box<Expr> = {
  <l : ExprP2> <op : OpP2> <r : ExprP3> => Box::new(Expr::BinOp(op, l, r)),
  ExprP3,
};

OpP3 : BinOp = {
  "*"  => BinOp::Mul,
  "/"  => BinOp::Div,
  "%"  => BinOp::Mod,
  "&&" => BinOp::And,
  "^^" => BinOp::Xor,
};
ExprP3 : Box<Expr> = {
  <l : ExprP3> <op : OpP3> <r : ExprPrefix> => Box::new(Expr::BinOp(op, l, r)),
  <e : ExprPrefix> => e,
};

ExprPrefixUnboxed : Expr = {
  "!" <e : ExprPrefix> => Expr::Deref(e),
  "~" <e : ExprPrefix> => Expr::Not(e),
  "new" <e : ExprPrefix> => Expr::New(e),
  "free" <e : ExprPrefix> => Expr::Free(e),
  "allocate" <e : Atom> "in" <r : ExprPrefix> => Expr::Allocate(e, r),
  <e : Atom> => *e,
};
ExprPrefix : Box<Expr> = ExprPrefixUnboxed => Box::new(<>);

Atom : Box<Expr> = {
  <id : Ident> => Box::new(Expr::Var(id)),
  // literals
  <n : Num> => Box::new(Expr::IntLit(n)),
  "true" => Box::new(Expr::BoolLit(true)),
  "false" => Box::new(Expr::BoolLit(false)),
  <c : Char> => Box::new(Expr::CharLit(c)),
  "()" => Box::new(Expr::Unit),
  // operators
  "(" <e : ExprP1> ")" => e,
  // function calls
  <f : Ident> "(" <args : Comma<Expr>> ")" =>
    Box::new(
      Expr::FunCall(f, None, args.into_iter().map(|boxed| *boxed).collect())
    ),
  <f : Ident> "[" <targs : CommaOne<Type>> "]" "(" <args : Comma<Expr>> ")" =>
    Box::new(  
      Expr::FunCall(f,
        Some(targs),
        args.into_iter().map(|boxed| *boxed).collect())
    ),
  // products
  <r : Ident> "{" <fs : Comma<FieldVal>> "}" => Box::new(Expr::Record(r, fs)),
  <e : Atom> "." <l : Ident> => Box::new(Expr::Proj(e, l)),
  "(" <es : CommaTwo<Expr>> ")" =>
    Box::new(Expr::Tuple(
      es.into_iter().map(|boxed| *boxed).collect()
    )),
  "[" <es : Comma<Expr>> "]" =>
    Box::new(Expr::ListLit(
      es.into_iter().map(|boxed| *boxed).collect()
    )),
  // memory
  "new" "region" => Box::new(Expr::NewRegion),
};

FieldVal : FieldVal = {
  <n : Ident> "=" <v : Expr> => FieldVal {
    nam: n,
    val: v,
  }
};

pub Expr = { ExprP1 };



// Type grammar
pub Type : Type = {
  <t : Type> "#" <n : Num> => Type::List(Box::new(t), n),
  TypeAtom
};
TypeAtom : Type = {
  "i32" => Type::Int32,
  "bool" => Type::Boolean,
  "char" => Type::Char,
  "()" => Type::Unit,
  "(" <ts : CommaTwo<Type>> ")" => Type::Prod(ts),
  <x : Ident> => Type::TypVar(x),
  <x : Ident> "[" <ts : CommaOne<Type>> "]" => Type::TypApp(x, ts),
  "&" <t : TypeAtom> => Type::Ptr(Box::new(t)),
  "mut" <t : TypeAtom> => Type::Mut(Box::new(t)),
  "region" => Type::Region,
  "(" <t : Type> ")" => t,
};


// Pattern language
Pipe<T> : Vec<T> = {
  <ts : (PipeOne<T>)?> => match ts {
    None => vec![],
    Some(ts) => ts,
  }
}
PipeOne<T> : Vec<T> = {
  <t : T> <mut ts : ("|" <T>)*> => { ts.insert(0, t); ts }
};
PipeTwo<T> : Vec<T> = {
  <t : T> <mut ts : ("|" <T>)+> => { ts.insert(0, t); ts }
};

pub Pattern : Pattern = {
  <ps : PipeTwo<PatternAtom>> => Pattern::Or(ps),
  PatternAtom,
};

PatternAtom : Pattern = {
  "_" => Pattern::Wildcard,
  Ident => Pattern::Var(<>),
  "(" <ps : CommaTwo<Pattern>> ")" => Pattern::Tuple(ps),
  "[" <ps : CommaTwo<Pattern>> "]" => Pattern::List(ps),
  <x : Ident> "(" <ps : Comma<Pattern>> ")" => Pattern::Ctor(x, ps),
  "(" <p : Pattern> ")" => p,
};


// Statements
pub Block : Vec<Stmt> = <ss : Stmt+> => ss;

Branch : Branch = {
  "|" <p : Pattern> "=>" <b : Block> => Branch {pat: p, bod: b},
};

pub Stmt : Stmt = {
  "if" <e : Expr> "then" <b : Block> "end" => Stmt::IfThen(*e, b),
  "if" <e : Expr> "then" <b1 : Block> "else" <b2 : Block> "end" =>
    Stmt::IfThenElse(*e, b1, b2),
  "match" <e : Expr> "with" <bs : Branch+> "end" => Stmt::Match(*e, bs),
  "begin" <b : Block> "end" => Stmt::Block(b),
  "foreach" <x : Ident> "in" <e : Expr> "do" <b : Block> "end" =>
    Stmt::ForEach(x, *e, b),
  "while" <e : Expr> "do" <b : Block> "end" => Stmt::WhileLoop(*e, b),
  "let" <p : Pattern> <t : (":" <Type>)?> "=" <e : Expr> ";" =>
    Stmt::VarDecl(p, t, *e),
  "set" <l : Expr> "=" <r : Expr> ";" =>
    Stmt::VarAssgn(*l, *r),
  "ret" <e : Expr> ";" => Stmt::Return(*e),
  <e : Expr> ";" => Stmt::ExprStmt(*e),
};


// Top level
TypParam : TypParam = {
  <x : Ident> "of" <cs : Constraints> => TypParam {nam: x, sups: cs},
};
Constraints : Vec<String> = {
  Ident => vec![<>],
  "(" <cs : Comma<Ident>> ")" => cs,
};
TypParams : Vec<TypParam> = {
  <tps : ("[" <CommaOne<TypParam>> "]")?> => match tps {
    None => vec![],
    Some(tps) => tps,
  }
}

Param : Param = {
  <x : Ident> <t : (":" <Type>)?> => Param {nam: x, typ : t},
};
Field : Field = {
  <x : Ident> ":" <t : Type> => Field {nam: x, typ: t},
};
Case : Field = {
  <x : Ident> "of" <t : Type> => Field {nam: x, typ: t},
};

Sig : Sig = {
  "fun" <x : Ident>
    <tps : TypParams>
    "(" <ps : Comma<Field>> ")"
    ":" <t : Type> => Sig {
      nam: x,
      tparams: tps,
      params: ps,
      ret: t,
    },
};

FunDefn : FunDefn = {
  "fun" <x : Ident>
  <tps : TypParams>
  "(" <ps : Comma<Param>> ")"
  <t : (":" <Type>)?> "="
  <b : Block>
  "end" => FunDefn {
    nam: x,
    tparams: tps,
    params: ps,
    ret: t,
    bod: b,
  },
};

Decl : Decl = {
  FunDefn => Decl::Fun(<>),

  "record" <x : Ident> <tps : TypParams> "=" "{"
    <fs : Comma<Field>>
    "}" => Decl::Record(x, tps, fs),

  "variant" <x : Ident> <tps : TypParams> "where"
    <fs : ("|" <Case>)*>
    "end" => Decl::Variant(x, tps, fs),

  "class" <x : Ident> "for" <tp : TypParam> "where"
    <ss : Sig*> "end" => Decl::Class(x, tp, ss),

  "impl" <x : Ident> "for" <t : Type> "where"
    <ss : FunDefn*> "end" => Decl::Impl(x, t, ss),

  "type" <x : Ident> <tps : TypParams> "=" <t : Type> =>
    Decl::Type(x, tps, t),
};

pub Prog = Decl*